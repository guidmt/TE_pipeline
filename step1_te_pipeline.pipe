/// Pipeline TE

//Directory with script
DIRECTORY_UTILS="/SYNTAC/gmt/pipeline_eg/denisova/utils_good"

//Define the name of your project
DIRECTORY_PROJECT="/SYNTAC/gmt/pipeline_eg/test_denisova"

//Specify the folder with the fasta of archaic (e.g. denisova)
PATH_FASTA_ARCHAIC="/SYNTAC/gmt/pipeline_eg/denisova/data"

//Specify the directory with the fasta of the reference genome (e.g. hs375d)
FILE_REFERENCE="/SYNTAC/gmt/pipeline_eg/denisova/reference/hs37d5.fa"

//Specify a file with the repegetive elements 
FILE_RETRO="/SYNTAC/gmt/pipeline_eg/human_specific_active_non_ltr_retrotransposons_list_definitive.txt"

//////////////////////////////////////////////////////////////////////////////////////////////////////////

// Step 1: Create a folder with the project
create_dir_project = {
	exec "mkdir -p $DIRECTORY_PROJECT"
}

// Step 2: Create subdirectories for the project
create_subdir_project_step1 = {
        exec "mkdir -p $DIRECTORY_PROJECT/step1 $DIRECTORY_PROJECT/step1/processing/ $DIRECTORY_PROJECT/step1/results/ $DIRECTORY_PROJECT/step1/logs/"
}

create_subdir_project_step2 = {
        exec "mkdir -p $DIRECTORY_PROJECT/step2 $DIRECTORY_PROJECT/step2/processing/ $DIRECTORY_PROJECT/step2/results/ $DIRECTORY_PROJECT/step2/logs/"
}

create_subdir_project_step3 = {
        exec "mkdir -p $DIRECTORY_PROJECT/step3 $DIRECTORY_PROJECT/step3/processing/ $DIRECTORY_PROJECT/step3/results/ $DIRECTORY_PROJECT/step3/logs/"
}

//
// Start Step1
//

// Step 1.2: Create indices fasta archaic
blast_index_archaic = {

  exec "for i in \$(ls $PATH_FASTA_ARCHAIC/*.fa);do makeblastdb -in $i -dbtype nucl;done"

}

// Step 1.3: Create indices of the reference 
blast_index_reference = {
  exec """makeblastdb -in $FILE_REFERENCE -dbtype nucl;
        seqkit split --by-id $FILE_REFERENCE
        """
}

// Step 1.4: Aligment fasta archaic with reference
blast_alignment_archaic = {

        exec """for faf in \$(ls $PATH_FASTA_ARCHAIC/*.fa);
        do
        faf_name=\$(basename \$faf .fa);
        echo $faf_name;
        echo $FILE_RETRO;
        blastn -query $FILE_RETRO -perc_identity 95 -db $faf -task blastn -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen" -num_alignments 1000000000 -out $DIRECTORY_PROJECT/step1/processing/$faf_name".blasted_retrotrasposons";
        done"""
}

// Step 1.5: Alignment retrotransposon list with reference

blast_alignment_retro_ref={

        exec """blastn -query $FILE_RETRO
                -db $FILE_REFERENCE
                -perc_identity 95
                -out $DIRECTORY_PROJECT/step1/processing/reference_blasted_tab.txt
                -task blastn -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen"
                -num_alignments 1000000000
                -num_threads 32
             """
}


// Step 1.7: Convert the fasta of archaic in tab format with seqkit
seqkit_archaic={
	
	exec """
        for faf_to_convert in \$(ls $PATH_FASTA_ARCHAIC/*.fa);
        do
        faf_name_tab=\$(basename \$faf_to_convert .fa);
        echo $faf_name_tab;
        seqkit fx2tab $faf_to_convert > $DIRECTORY_PROJECT/step1/processing/$faf_name_tab".tab.fa";
        done"""
}

// Step 1.8: sorting table fasta of archaic

sort_blastn_and_join_archaic={
	
	exec """
        for faf_to_join in \$(ls $DIRECTORY_PROJECT/step1/processing/*.tab.fa);
        do
        faf_name_tab=\$(basename \$faf_to_join .tab.fa);
        echo $faf_name_tab;
        (export LC_ALL=C; join -1 2 -2 1 <(sort -k 2 $DIRECTORY_PROJECT/step1/processing/$faf_name_tab".blasted_retrotrasposons") <(sort -k 1 $faf_to_join)| tr ' ' '\t' > $DIRECTORY_PROJECT/step1/processing/$faf_name_tab".blast_alignment.final")
	done"""
}


// Step 1.9: filtering_3prime_from_blast_archaic_definitive.R

filtering_3prime_from_blast_archaic_definitive={

        output.dir="$DIRECTORY_PROJECT/step1/processing/"

	exec """
	
	for final_fa in \$(ls $DIRECTORY_PROJECT/step1/processing/*.blast_alignment.final);
	do
	faf_final_fa=\$(basename \$final_fa .tab.fa);
	echo $final_fa;
	echo $faf_final_fa;
	Rscript $DIRECTORY_UTILS/filtering_3prime_from_blast_archaic_definitive.R $final_fa 30 25 30 $output.dir/$faf_final_fa;
	done"""
}

// Step 2.0: concatenate the results from 1.9

cat_output_3prime_blast_archaic={


	exec """
	cat $DIRECTORY_PROJECT/step1/processing/*_3prime_sense.fa > $DIRECTORY_PROJECT/step1/processing/archaic_3prime_sense.fa;
	cat $DIRECTORY_PROJECT/step1/processing/*_3prime_antisense.fa > $DIRECTORY_PROJECT/step1/processing/archaic_3prime_antisense.fa;
	cat $DIRECTORY_PROJECT/step1/processing/*_3prime_flanking_sense.fa > $DIRECTORY_PROJECT/step1/processing/archaic_3prime_flanking_sense.fa;
	cat $DIRECTORY_PROJECT/step1/processing/*_3prime_flanking_antisense.fa > $DIRECTORY_PROJECT/step1/processing/archaic_3prime_flanking_antisense.fa;
	"""
}


// Step 2.1: filtering_3prime_from_blast_modern_definitive

filtering_3prime_from_blast_modern_definitive={
	
	output.dir="$DIRECTORY_PROJECT/step1/processing/"

	exec """
	Rscript $DIRECTORY_UTILS/filtering_3prime_from_blast_modern_definitive.R $DIRECTORY_PROJECT/step1/processing/reference_blasted_tab.txt 30 25 30 100 $output.dir/modern
	"""
	
}

// Step 2.2: fasta_reference_portion_VariableLength.pl

fasta_reference_portion_variablelength={


	exec """
	     
	perl $DIRECTORY_UTILS/fasta_reference_portion_VariableLength_new.pl $DIRECTORY_PROJECT/step1/processing/modern_3prime_sense_pos.txt $DIRECTORY_PROJECT/step1/processing/modern_3prime_flanking_sense.fa down $FILE_REFERENCE;
	perl $DIRECTORY_UTILS/fasta_reference_portion_VariableLength_new.pl $DIRECTORY_PROJECT/step1/processing/modern_3prime_antisense_pos.txt $DIRECTORY_PROJECT/step1/processing/modern_3prime_flanking_antisense.fa up $FILE_REFERENCE;
	perl $DIRECTORY_UTILS/fasta_reference_portion_VariableLength_new.pl $DIRECTORY_PROJECT/step1/processing/modern_5prime_sense_pos.txt $DIRECTORY_PROJECT/step1/processing/modern_5prime_flanking_sense.fa down $FILE_REFERENCE;
	perl $DIRECTORY_UTILS/fasta_reference_portion_VariableLength_new.pl $DIRECTORY_PROJECT/step1/processing/modern_5prime_antisense_pos.txt $DIRECTORY_PROJECT/step1/processing/modern_5prime_flanking_antisense.fa up $FILE_REFERENCE;
	perl $DIRECTORY_UTILS/fasta_reference_portion_VariableLength_new.pl $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_sense_pos.txt $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_sense.fa down $FILE_REFERENCE;
	perl $DIRECTORY_UTILS/fasta_reference_portion_VariableLength_new.pl $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_antisense_pos.txt $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_antisense.fa up $FILE_REFENCE;

        """
}

// Step 2.4: remove duplicates
remove_duplicates_flankings_and_filled_sites={

	exec """
	
	seqkit fx2tab $DIRECTORY_PROJECT/step1/processing/modern_3prime_flanking_sense.fa | awk -F'\t' '!seen[\$1]++'| seqkit tab2fx > $DIRECTORY_PROJECT/step1/processing/modern_3prime_flanking_sense.fa;
	seqkit fx2tab $DIRECTORY_PROJECT/step1/processing/modern_5prime_flanking_sense.fa | awk -F'\t' '!seen[\$1]++'| seqkit tab2fx > $DIRECTORY_PROJECT/step1/processing/modern_5prime_flanking_sense.fa;
        seqkit fx2tab $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_sense_pos.txt | awk -F'\t' '!seen[\$1]++'| seqkit tab2fx > $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_sense_pos.txt;

        seqkit fx2tab $DIRECTORY_PROJECT/step1/processing/modern_3prime_flanking_antisense.fa | awk -F'\t' '!seen[\$1]++'| seqkit tab2fx > $DIRECTORY_PROJECT/step1/processing/modern_3prime_flanking_antisense.fa;
        seqkit fx2tab $DIRECTORY_PROJECT/step1/processing/modern_5prime_flanking_antisense.fa | awk -F'\t' '!seen[\$1]++'| seqkit tab2fx > $DIRECTORY_PROJECT/step1/processing/modern_5prime_flanking_antisense.fa;
        seqkit fx2tab $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_antisense_pos.txt | awk -F'\t' '!seen[\$1]++'| seqkit tab2fx > $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_antisense_pos.txt;

	"""

	}

// Step 2.4: Create index flanking sense archaic

blast_index_flank_archaic={
	
	exec """
	makeblastdb -in $DIRECTORY_PROJECT/step1/processing/archaic_3prime_flanking_sense.fa -dbtype nucl	
	"""

	}

// Step 2.5:  blast flanking sense with sense modern and archaic

blast_flanking_sense_modern_archaic={
	
	exec """
	blastn -query $DIRECTORY_PROJECT/step1/processing/modern_3prime_flanking_sense.fa 
	-db $DIRECTORY_PROJECT/step1/processing/archaic_insertions_3prime_flanking_sense.fa 
	-task blastn 
	-perc_identity 90 
	-outfmt 6 
	-num_alignments 1000000000 
	-num_threads 20 
	-out $DIRECTORY_PROJECT/step1/processing/modern_archaic_blasted_3prime_flanking_sense.txt
	"""
	}

// Step 2.6:  blast flanking antisense with antisense modern and archaic

blast_flanking_antisense_modern_archaic={

        exec """
        blastn -query $DIRECTORY_PROJECT/step1/processing/modern_3prime_flanking_antisense.fa
        -db $DIRECTORY_PROJECT/step1/processing/archaic_flanking_3prime_flanking_antisense.fa
        -task blastn 
        -perc_identity 90 
        -outfmt 6 
        -num_alignments 1000000000 
        -num_threads 20 
        -out $DIRECTORY_PROJECT/step1/processing/modern_archaic_blasted_3prime_flanking_antisense.txt
        """
        }

// Step 2.7: filtering archaic vs modern

filtering_archaic_vs_modern={

	exec """

	function filter_archaic_vs_modern(){

	sequences_to_exclude=\$(less \$1 |awk '{if (\$4 >=25){print}}'|cut -f 1)
	seqkit fx2tab \$2 |grep -v "sequences_to_exclude" | seqkit tab2fx

	}

	filter_archaic_vs_modern $DIRECTORY_PROJECT/step1/processing/modern_archaic_blasted_3prime_flanking_sense.txt $DIRECTORY_PROJECT/step1/processing/archaic_3prime_sense.fa > $DIRECTORY_PROJECT/step1/results/putative_archaic_specific_3prime_reads_sense.fa;

	filter_archaic_vs_modern $DIRECTORY_PROJECT/step1/processing/modern_archaic_blasted_3prime_flanking_antisense.txt $DIRECTORY_PROJECT/step1/processing/archaic_3prime_antisense.fa > $DIRECTORY_PROJECT/step1/results/putative_archaic_specific_3prime_reads_antisense.fa;

	filter_archaic_vs_modern $DIRECTORY_PROJECT/step1/processing/modern_archaic_blasted_3prime_flanking_sense.txt $DIRECTORY_PROJECT/step1/processing/archaic_3prime_flanking_sense.fa > $DIRECTORY_PROJECT/step1/results/putative_archaic_specific_3prime_flanking_sense.fa;

	filter_archaic_vs_modern $DIRECTORY_PROJECT/step1/processing/modern_archaic_blasted_3prime_flanking_sense.txt $DIRECTORY_PROJECT/step1/processing/archaic_3prime_flanking_antisense.fa > $DIRECTORY_PROJECT/step1/results/putative_archaic_specific_3prime_flanking_antisense.fa;

	filter_archaic_vs_modern $DIRECTORY_PROJECT/step1/processing/modern_archaic_blasted_3prime_flanking_sense.txt $DIRECTORY_PROJECT/step1/processing/modern_archaic_blasted_3prime_flanking_sense.txt > $DIRECTORY_PROJECT/step1/processing/putative_modern_specific_3prime_flanking_sense.fa;

	filter_archaic_vs_modern $DIRECTORY_PROJECT/step1/processing/modern_archaic_blasted_3prime_flanking_antisense.txt	$DIRECTORY_PROJECT/step1/processing/modern_archaic_blasted_3prime_flanking_antisense.txt > $DIRECTORY_PROJECT/step1/processing/putative_modern_specific_3prime_flanking_antisense.fa
 	
	"""

}


// Step 2.8: filtering archaic vs modern

filtering_5prime_and_filled_sites_from_modern_specific_3prime={

	

	exec """
	
        seqkit fx2tab $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_sense.fa |tr ':' '\t'|tr '-' '\t' > $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_sense.tab.fa;

	seqkit fx2tab $DIRECTORY_PROJECT/step1/processing/modern_3prime_flanking_sense.fa |tr ':' '\t'|tr '-' '\t' > $DIRECTORY_PROJECT/step1/processing/modern_3prime_flanking_sense.tab.fa;

	seqkit fx2tab $DIRECTORY_PROJECT/step1/processing/modern_5prime_flanking_sense.fa |tr ':' '\t'|tr '-' '\t' > $DIRECTORY_PROJECT/step1/processing/modern_5prime_flanking_sense.tab.fa;

	//filled SENSE FS - 3prime
	join -j 3 <(sort $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_sense.tab.fa) <(sort $DIRECTORY_PROJECT/step1/results/modern_specific_3prime_flanking_sense.fa)|tr '' '\t'|cut -f 1,2,3,4|sort|awk -v OFS="" '{print \$2,":",\$1,"-",\$3,"\t",\$4}'|seqkit tab2fx > $DIRECTORY_PROJECT/step1/results/modern_specific_filled_sites_sense.fa;

	//filled SENSE FS - 5prime
	join -j 2 <(sort $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_sense.tab.fa) <(sort $DIRECTORY_PROJECT/step1/results/modern_specific_3prime_flanking_sense.fa)|tr '' '\t'|cut -f 1,2,3,4|sort|awk -v OFS="" '{print \$2,":",\$1,"-",\$3,"\t",\$4}'|seqkit tab2fx > $DIRECTORY_PROJECT/step1/results/modern_specific_5prime_flanking_sense.fa;
	
	seqkit fx2tab $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_antisense.fa |tr ':' '\t'|tr '-' '\t' > $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_antisense.tab.fa;

	seqkit fx2tab $DIRECTORY_PROJECT/step1/processing/modern_3prime_flanking_antisense.fa |tr ':' '\t'|tr '-' '\t' > $DIRECTORY_PROJECT/step1/processing/modern_3prime_flanking_antisense.tab.fa;

	seqkit fx2tab $DIRECTORY_PROJECT/step1/processing/modern_5prime_flanking_antisense.fa |tr ':' '\t'|tr '-' '\t' > $DIRECTORY_PROJECT/step1/processing/modern_5prime_flanking_antisense.tab.fa;

	//filled ANTISENSE FS - 3prime
        join -j 2 <(sort $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_antisense.tab.fa) <(sort $DIRECTORY_PROJECT/step1/results/modern_specific_3prime_flanking_antisense.fa)|tr '' '\t'|cut -f 1,2,3,4|sort|awk -v OFS="" '{print \$2,":",\$1,"-",\$3,"\t",\$4}'|seqkit tab2fx > $DIRECTORY_PROJECT/step1/results/modern_specific_filled_sites_antisense.fa;

        //filled ANTISENSE FS - 5prime
        join -j 3 <(sort $DIRECTORY_PROJECT/step1/processing/modern_filled_sites_antisense.tab.fa) <(sort $DIRECTORY_PROJECT/step1/results/modern_specific_3prime_flanking_antisense.fa)|tr '' '\t'|cut -f 1,2,3,4|sort|awk -v OFS="" '{print \$2,":",\$1,"-",\$3,"\t",\$4}'|seqkit tab2fx > $DIRECTORY_PROJECT/step1/results/modern_specific_5prime_flanking_antisense.fa;

	"""
}

Bpipe.run{

//create_subdir_project_step1+create_subdir_project_step2+create_subdir_project_step3+blast_index_archaic+blast_index_reference+blast_alignment_archaic+blast_alignment_retro_ref+seqkit_archaic+seqkit_archaic+sort_blastn_and_join_archaic+filtering_3prime_from_blast_archaic_definitive+cat_output_3prime_blast_archaic+filtering_3prime_from_blast_modern_definitive+

fasta_reference_portion_variablelength+remove_duplicates_flankings_and_filled_sites+blast_index_flank_archaic+blast_flanking_sense_modern_archaic+blast_flanking_antisense_modern_archaic+filtering_5prime_and_filled_sites_from_modern_specific_3prime

}

